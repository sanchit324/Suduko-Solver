from typing import Tuple, List
# No other imports allowed
# import time 

# PART OF THE DRIVER CODE

def input_sudoku() -> List[List[int]]:
	sudoku= list()
	for _ in range(9):
		row = list(map(int, input().rstrip(" ").split(" ")))
		sudoku.append(row)
	return sudoku

def print_sudoku(sudoku:List[List[int]]) -> None:
	for i in range(9):
		for j in range(9):
			print(sudoku[i][j], end = " ")
		print()

# -------Code starts here-------------

# To get Block number
def get_block_num(sudoku:List[List[int]], pos:Tuple[int, int]) -> int:
	i = pos[0] #Row Element
	j = pos[1] #Column Element

	if int((i-1)/3) == 0:  #Considering rows 1,2,3
		if int((j-1)/3) == 0:	#Considering columns 1,2,3
			return 1
		if int((j-1)/3) == 1:   #Considering rows 4,5,6
			return 2
		if int((j-1)/3) == 2:   #Considering rows 7,8,9
			return 3
	if int((i-1)/3) == 1:    #Considering rows 4,5,6
		if int((j-1)/3) == 0:    #Considering columns 1,2,3
			return 4
		if int((j-1)/3) == 1:    #Considering rows 4,5,6
			return 5
		if int((j-1)/3) == 2:    #Considering rows 7,8,9
			return 6
	if int((i-1)/3) == 2:    #Considering rows 7,8,9
		if int((j-1)/3) == 0:     #Considering columns 1,2,3
			return 7
		if int((j-1)/3) == 1:     #Considering rows 4,5,6
			return 8
		if int((j-1)/3) == 2:     #Considering rows 7,8,9
			return 9

# Getting the position of tuple inside that block
def get_position_inside_block(sudoku:List[List[int]], pos:Tuple[int, int]) -> int:
	i = pos[0]  #Row Element
	j = pos[1]  #Column Element

	for k in range(3):
		for l in range(3):
			if i == k*3 + 1:  #Considering rows 1,4,7
				if j == l*3 + 1:	#Considering columns 1,4,7
					return 1
				if j == l*3 + 2:	#Considering rows 2,5,8
					return 2
				if j == l*3 + 3:	#Considering rows 3,6,9
					return 3
			if i == k*3 + 2:   #Considering rows 2,5,8
				if j == l*3 + 1:	#Considering columns 1,4,7
					return 4
				if j == l*3 + 2:	#Considering rows 2,5,8
					return 5
				if j == l*3 + 3:	#Considering rows 3,6,9
					return 6
			if i == k*3 + 3:   #Considering rows 3,6,9
				if j == l*3 + 1:	#Considering columns 1,4,7
					return 7
				if j == l*3 + 2:	#Considering rows 2,5,8
					return 8
				if j == l*3 + 3:	#Considering rows 3,6,9
					return 9


# To get the block 
def get_block(sudoku:List[List[int]], x: int) -> List[int]:
	
	for k in range(3):
		if x == k*3 + 1:
			list = sudoku[x-1][0:3] + sudoku[x][0:3] + sudoku[x+1][0:3] #Considering the blocks 1,4,7
		elif x == k*3 + 2:
			list = sudoku[x-2][3:6] + sudoku[x-1][3:6] + sudoku[x][3:6] #Considering the blocks 2,5,8
		elif x == k*3 + 3:
			list = sudoku[x-3][6:9] + sudoku[x-2][6:9] + sudoku[x-1][6:9] #Considering the blocks 3,6,9
	return list
	
# To get the entire row
def get_row(sudoku:List[List[int]], i: int)-> List[int]:
	return sudoku[i-1]

# To get entire Column 
def get_column(sudoku:List[List[int]], x: int)-> List[int]:
	list = []
	for k in range(9): # k is the row index here
		list.append(sudoku[k][x-1])
	return list

# To find the first zero position
def find_first_unassigned_position(sudoku : List[List[int]]) -> Tuple[int, int]:
	for i in range(9): #Rows
		for j in range(9): #Columns
			if sudoku[i][j] == 0: #Element
				return(i+1,j+1)	
	return(-1,-1)

# To check whether a list is valid or not considering the rules od sudoku	
def valid_list(lst: List[int])-> bool:
	for i in range(9):
			if lst[i] == 0:  #Bypassing the element 0
				pass
			elif lst.count(lst[i]) > 1: #Checking more than one repeatations in the list
				return False
	else:
		return True
			
# To check whether the sudoku is valid or not
def valid_sudoku(sudoku:List[List[int]])-> bool:
	c = 0
	for i in range(1,10):
		block = get_block(sudoku,i) # Entire Block
		row = get_row(sudoku,i)  #Row 
		column = get_column(sudoku,i) #Column
		if valid_list(block) and valid_list(row) and valid_list(column):  #Checking the validity of all the three lists
			c += 1
		else:
			c += 0
	if c ==9:
		return True
	else:
		return False

# Checking for all possible candidates 
def get_candidates(sudoku:List[List[int]], pos:Tuple[int, int]) -> List[int]:
	lst = [1,2,3,4,5,6,7,8,9]
	i = pos[0] # Row Element
	j = pos[1] #Column Element

	row = get_row(sudoku,i) #i comes directly from the tuple[0]
	column = get_column(sudoku,j) #j comes directly from the tuple[1]
	blockNum = get_block_num(sudoku,(i,j)) 
	block = get_block(sudoku,blockNum)
	
	#Removing the commmon elements by set operations 
	lst = list(set(lst) - set(row))  
	lst = list(set(lst) - set(column))
	lst = list(set(lst) - set(block))
	return lst 

# To make move by replacing the 0's with the possible elements
def make_move(sudoku:List[List[int]], pos:Tuple[int, int], num:int) -> List[List[int]]:
	i = pos[0]
	j = pos[1]

	sudoku[i-1][j-1] = num
	return sudoku

# To undo the move by replacing the element by 0 
def undo_move(sudoku:List[List[int]], pos:Tuple[int, int]):
	i = pos[0]
	j = pos[1]

	sudoku[i-1][j-1] = 0
	return sudoku


# The final sudoku solver
def sudoku_solver(sudoku: List[List[int]]) -> Tuple[bool, List[List[int]]]:
	if not valid_sudoku(sudoku): 
		return(False, sudoku)
	possible_position = find_first_unassigned_position(sudoku)  #Possible positions
	candidates = get_candidates(sudoku,possible_position)  #The candidates list 
	for i in range(len(candidates)):     
		if possible_position != (-1,-1):     #Checking whether the sudoku is already solved or not 
			make_move(sudoku,possible_position,candidates[i])    #Making move to solve sudoku
			if (valid_sudoku(sudoku)):  #Checking the validity of the sudoku
				if sudoku_solver(sudoku)[0]:   #Checking True/False
					return(True, sudoku)     

			undo_move(sudoku,possible_position)      #Undo if wromg

	if possible_position == (-1,-1):     #If all zeros are filled return True
		return(True, sudoku)
	else:
		return(False,sudoku)

def in_lab_component(sudoku: List[List[int]]):
	print("Testcases for In Lab evaluation")
	print("Get Block Number:")
	print(get_block_num(sudoku,(4,4)))
	print(get_block_num(sudoku,(7,2)))
	print(get_block_num(sudoku,(2,6)))
	print("Get position:")
	print(get_position_inside_block(sudoku,(4,9)))
	print(get_position_inside_block(sudoku,(3,2)))
	print(get_position_inside_block(sudoku,(9,5)))
	print("Get Block:")
	print(get_block(sudoku,3))
	print(get_block(sudoku,5))
	print(get_block(sudoku,9))
	print("Get Row:")
	print(get_row(sudoku,3))
	print(get_row(sudoku,5))
	print(get_row(sudoku,9))
	


# Following is the driver code
# you can edit the following code to check your performance.
if __name__ == "__main__":
	# Input the sudoku from stdin
	sudoku = input_sudoku()
	# st = time.time()
	# Try to solve the sudoku
	possible, sudoku = sudoku_solver(sudoku)
	# print(time.time()- st)
	# The following line is for the in-lab component
	in_lab_component(sudoku)
	# Show the result of the same to your TA to get your code evaulated

	# Check if it could be solved
	if possible:
		print("Found a valid solution for the given sudoku :)")
		print_sudoku(sudoku)

	else:
		print("The given sudoku cannot be solved :(")
		print_sudoku(sudoku)
